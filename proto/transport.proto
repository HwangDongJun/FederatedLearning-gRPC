syntax="proto3";

package transport;

service TransportService {
	rpc transport(stream transportRequest) returns (stream transportResponse) {}
}

enum State {
	NONE = 0;
	ON = 1;
	OFF = 2;
	TRAINING = 3;
	TRAIN_DONE = 4;
}

message ReadyReq {
	string type = 1; // R:ready
	string cname = 2;
	State state = 3;
	map<string, Scalar> config = 4;
}
message UpdateReq {
	string type = 1; // P:parameter, L:logs, T:training
	optional bytes buffer_chunk = 2;
	optional string title = 3;
	optional State state = 4;
	optional string cname = 5;
	optional int32 file_len = 6;
}

message transportRequest {
	oneof request_oneof {
		ReadyReq ready_req = 1;
		UpdateReq update_req = 2;
	}
}

message ReadyRep {
	map<string, Scalar> config = 1;
}
message UpdateRep {
	string type = 1;
	optional bytes buffer_chunk = 2;
	optional string title = 3;
}

message transportResponse {
	oneof response_oneof {
		ReadyRep ready_rep = 1;
		UpdateRep update_rep = 2;
	}
}

message Scalar {
	oneof scalar {
		double scdouble = 1;
		float scfloat = 2;
		int32 scint32 = 3;
		string scstring = 4;
		bool scbool = 5;
	}
}
